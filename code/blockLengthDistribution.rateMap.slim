// set up a simple neutral simulation
// template script for looking into the effect of varying (a) pop size, (b) fine-scale recomb, (c) number of chroms
initialize() {
	//defineConstant("L", 1000);
	//defineConstant("s", 0.4);
	//defineConstant("N", 100000);
	//defineConstant("hyb_frac", 0.2);	// fraction of hybrids initially
  //defineConstant("numChroms",20);
  //defineConstant("baseRate",1e-8);
  //defineConstant("baseGenSize",3e9);
	defineConstant("hybs", asInteger(round(hyb_frac*N)));
	initializeMutationRate(0);
  initializeMutationType("m1", 0.5, "f", 0);
  m1.convertToSubstitution = F;
  initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeSex("A");
	// defineConstant("MR",<male rate file>)
	// defineConstant("FR",<female rate file>)
		// input male recombination
	 lines = readFile(MR);
	 rates = NULL;
	for (line in lines)
	 {
	 components = strsplit(line, "\t");
	 rates = c(rates, asFloat(components[0]));
	 }
	 initializeRecombinationRate(rates, 1:(L-1), sex="M");
	 // input female recombination map
	 lines = readFile(FR);
	 rates = NULL;
	for (line in lines)
	 {
	 components = strsplit(line, "\t");
	 rates = c(rates, asFloat(components[0]));
	 }
	 initializeRecombinationRate(rates, 1:(L-1), sex="F");
}

1 {
	sim.addSubpop("p1", N);
}

fitness(NULL) {
 introgressed = sum(c(genome1,genome2).countOfMutationsOfType(m1));
return 1.0 - (introgressed/(2*L))*s;
}

1 late() {
	catn(hybs);
	allIndividuals = p1.individuals;
	sampledIndividuals = sample(p1.individuals, hybs);
	for (ind in seq(0, length(sampledIndividuals)-1)){
		sampledIndividuals[ind].genome1.addNewMutation(m1, 0, 0:(L-1),originSubpop=ind);
	}}

1:100 late() {
	writeFile(filePath="blocks.out",contents = "gen\t" + sim.generation + "\t",append=T);
	catn("gen\t" + sim.generation + "\t");
	for (g in p1.genomes){
thisInd=c();
for (u in unique(g.mutations.subpopID))
 {thisInd=c(thisInd, (length(which(g.mutations.subpopID==u))));}
	writeFile(filePath="blocks.out",contents = paste(thisInd),append=T);}
}

101:1000 late() {
if (sim.generation % 10 == 0 ){
	writeFile(filePath="blocks.out",contents = "gen\t" + sim.generation + "\t",append=T);
	catn("gen\t" + sim.generation + "\t");
	for (g in p1.genomes){
thisInd=c();
for (u in unique(g.mutations.subpopID))
 {thisInd=c(thisInd, (length(which(g.mutations.subpopID==u))));}
	writeFile(filePath="blocks.out",contents = paste(thisInd),append=T);};
};
}


1000 { sim.simulationFinished(); }
