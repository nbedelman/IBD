// set up a simple neutral simulation
// template script for looking into the effect of varying (a) pop size, (b) fine-scale recomb, (c) number of chroms

initialize() {
	//defineConstant("L", 4000);
	//defineConstant("s", 0.4);
	//defineConstant("N", 10000);
	//defineConstant("hyb_frac", 0.4);	// fraction of hybrids initially
	//defineConstant("numChroms",10);
	defineConstant("hybs", asInteger(round(hyb_frac*N)));
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0);
	m1.convertToSubstitution = F;
	m1.color="orange";
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElement(g1, 0, L-1);

	chroms=1:numChroms;
	y=L/sum(chroms);
	varyChromSizes=round(chroms*y);
	varyChromRates=1/varyChromSizes;
	constChromLength=L/numChroms;
	allRates=NULL;
	for (r in seq(0,length(varyChromRates)-1))
		allRates=c(allRates,rep(varyChromRates[r],asInteger(varyChromSizes[r]-1)));

	rates=NULL;
	for (c in seq(1,numChroms)){
		rates = c(rates,sample(allRates,asInteger(constChromLength-1), replace=F),0.5);}


	initializeRecombinationRate(rates=rates, ends=0:(L-1));

	//write table with genome information
	position=0:(L-1);
	allChromNames=NULL;
	for (chr in chroms){
		allChromNames=c(allChromNames,rep(chr,asInteger(constChromLength)));}
	writeGenome=NULL;
	for (e in seq(0,L-1)){
		writeGenome =c(writeGenome, position[e]+"\t"+rates[e]+"\t"+allChromNames[e]+"\t"+constChromLength);}
	writeFile(filePath="genomeInfo.out",contents=writeGenome);

}

1 {
	sim.addSubpop("p1", N);
}

fitness(NULL) {
	introgressed = sum(c(genome1,genome2).countOfMutationsOfType(m1));
	return 1.0 - (introgressed/(2*L))*s;
}

1 late() {
	catn(hybs);
	allIndividuals = p1.individuals;
	sampledIndividuals = sample(p1.individuals, hybs);
	sampledIndividuals.genome1.addNewMutation(m1, 0, seq(0,L-1));
}

1: late(){
	if ((sim.generation % 100 == 0) | ((sim.generation < 100) & (sim.generation % 5 ==0) )){
		freqs=sim.mutationFrequencies(p1,sim.mutationsOfType(m1));
		positions=sim.mutationsOfType(m1).position;
		writeString=NULL;
		for (element in seq(0,length(freqs)-1)){
			writeString =c(writeString, positions[element]+"\t"+freqs[element]+"\t"+sim.generation);}
		writeFile(filePath="frequencies.out",contents=writeString, append=T);}
	else
		return;
}

2000 { sim.simulationFinished(); }
